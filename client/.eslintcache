[{"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\index.js":"1","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\App.js":"2","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\store.js":"3","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\AuthReducer.js":"4","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\helpers\\localStorage.js":"5","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\index.js":"6","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Header\\Header.js":"7","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Error\\Error.js":"8","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\AppReducer.js":"9","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Login\\Login.js":"10","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Join\\Join.js":"11","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Footer\\Footer.js":"12","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\NewsFeed\\NewsFeed.js":"13","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\NewsReducer.js":"14","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\api\\api.js":"15","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\NewsFeed\\helper.js":"16","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\index.js":"17","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\hoc\\withAuthRedirect.js":"18","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Header\\parts\\MobileMenu.js":"19","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Header\\parts\\DesktopMenu.js":"20","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\DarkTheme.js":"21","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\LightTheme.js":"22","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\russian.js":"23","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\english.js":"24","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Post\\Post.js":"25","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Feed\\Feed.js":"26","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\ChatReducer.js":"27","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Dialogs\\Chat\\Chat.js":"28","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Dialogs\\Chat\\Navbar\\Navbar.js":"29","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Post\\helper.js":"30","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Dialogs\\Search\\Search.js":"31"},{"size":384,"mtime":1612089041838,"results":"32","hashOfConfig":"33"},{"size":2123,"mtime":1612270989724,"results":"34","hashOfConfig":"33"},{"size":1030,"mtime":1612270802691,"results":"35","hashOfConfig":"33"},{"size":2353,"mtime":1611953187284,"results":"36","hashOfConfig":"33"},{"size":485,"mtime":1611675527811,"results":"37","hashOfConfig":"33"},{"size":182,"mtime":1611953187289,"results":"38","hashOfConfig":"33"},{"size":3621,"mtime":1612270802675,"results":"39","hashOfConfig":"33"},{"size":1321,"mtime":1611953187252,"results":"40","hashOfConfig":"33"},{"size":1713,"mtime":1611953187283,"results":"41","hashOfConfig":"33"},{"size":6369,"mtime":1611953187263,"results":"42","hashOfConfig":"33"},{"size":7257,"mtime":1612107770120,"results":"43","hashOfConfig":"33"},{"size":4490,"mtime":1612270802673,"results":"44","hashOfConfig":"33"},{"size":6524,"mtime":1612271162507,"results":"45","hashOfConfig":"33"},{"size":5287,"mtime":1612270989732,"results":"46","hashOfConfig":"33"},{"size":2555,"mtime":1612270802662,"results":"47","hashOfConfig":"33"},{"size":512,"mtime":1611953187270,"results":"48","hashOfConfig":"33"},{"size":178,"mtime":1611953187280,"results":"49","hashOfConfig":"33"},{"size":764,"mtime":1611953187278,"results":"50","hashOfConfig":"33"},{"size":5651,"mtime":1612103529753,"results":"51","hashOfConfig":"33"},{"size":4140,"mtime":1612270802677,"results":"52","hashOfConfig":"33"},{"size":1264,"mtime":1612272555322,"results":"53","hashOfConfig":"33"},{"size":1272,"mtime":1612272568011,"results":"54","hashOfConfig":"33"},{"size":2810,"mtime":1612270989771,"results":"55","hashOfConfig":"33"},{"size":2015,"mtime":1612270989777,"results":"56","hashOfConfig":"33"},{"size":12147,"mtime":1612270989729,"results":"57","hashOfConfig":"33"},{"size":934,"mtime":1612271140703,"results":"58","hashOfConfig":"33"},{"size":1523,"mtime":1612270802689,"results":"59","hashOfConfig":"33"},{"size":13761,"mtime":1612275586038,"results":"60","hashOfConfig":"33"},{"size":1044,"mtime":1612273822371,"results":"61","hashOfConfig":"33"},{"size":1033,"mtime":1612270989731,"results":"62","hashOfConfig":"33"},{"size":1144,"mtime":1612271828787,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"cpe4bj",{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\index.js",[],["132","133"],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\App.js",["134","135"],"import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { initializeApp } from './redux/reducers/AppReducer';\nimport { getTheme } from './themes/index';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { LinearProgress } from '@material-ui/core';\nimport Header from './components/Header/Header';\nimport Login from './components/Login/Login';\nimport Join from './components/Join/Join';\nimport NewsFeed from './components/NewsFeed/NewsFeed';\nimport Error from './components/Error/Error';\nimport Chat from './components/Dialogs/Chat/Chat';\nimport Footer from './components/Footer/Footer';\n\nconst App = ({ token, theme, initialized, initializeApp }) => {\n    const currentTheme = getTheme(theme);\n\n    useEffect(() => {\n        initializeApp(token);\n    }, []);\n\n    return (\n        <ThemeProvider theme={createMuiTheme(currentTheme)}>\n            <>\n                <CssBaseline />\n                {initialized ? (\n                    <>\n                        <Header />\n\n                        <Switch>\n                            <Redirect exact from=\"/\" to=\"/feed\" />\n                            <Route path=\"/login\" exact component={Login} />\n                            <Route path=\"/join\" exact component={Join} />\n                            <Route path=\"/feed\" exact component={NewsFeed} />\n                            <Route path=\"/messenger\" exact component={Chat} />\n                            <Route component={Error} />\n                        </Switch>\n\n                        <Footer />\n                    </>\n                ) : (\n                    <LinearProgress />\n                )}\n            </>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized,\n    token: state.auth.token,\n    theme: state.app.theme,\n});\n\nexport default connect(mapStateToProps, { initializeApp })(App);\n","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\store.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\AuthReducer.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\helpers\\localStorage.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\index.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Header\\Header.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Error\\Error.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\AppReducer.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Login\\Login.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Join\\Join.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\NewsFeed\\NewsFeed.js",["136","137","138"],"import React, { useState, useEffect } from 'react';\nimport { compose } from 'redux';\nimport { withLogoutRedirect } from '../../hoc/withAuthRedirect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from './NewsFeed.module.css';\nimport { Container, Avatar } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport Post from '../Post/Post';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { uploadImage } from './helper.js';\nimport { getPosts, setPost } from '../../redux/reducers/NewsReducer';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport russian from '../../languages/russian';\nimport english from '../../languages/english';\nimport { Formik, Field } from 'formik';\nimport userAvatar from './assets/images/user.svg';\nimport { TextField } from 'formik-material-ui';\nimport * as Yup from 'yup';\n\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: '100%',\n        paddingTop: 70,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    newPost: {\n        margin: '25px auto',\n        width: 650,\n        borderRadius: '10px',\n        padding: '15px',\n        backgroundColor: `${theme.palette.post.default} !important`,\n        [theme.breakpoints.down('750')]: {\n            width: 350,\n        },\n        [theme.breakpoints.down('400')]: {\n            width: 200,\n        },\n    },\n}));\n\nfunction NewsFeed({ language, user, token, getPosts, setPost }) {\n    const classes = useStyles();\n    const translate = language === 'english' ? english : russian;\n\n    const [state, setState] = useState({ file: '', previewUrl: '' });\n    const [postState, setPostState] = useState(translate['newsfeed.post']);\n    const initialValues = { text: '' };\n\n    const PostSchema = Yup.object().shape({\n        text: Yup.string().required(translate['newsfeed.required']),\n    });\n\n    let { previewUrl } = state;\n    let preview = null;\n\n    if (previewUrl) {\n        preview = (\n            <>\n                <img src={previewUrl} alt={'Image Preview'} />\n                <button className={styles.closeButton} onClick={(e) => handleClose(e)}>\n                    <CloseIcon />\n                </button>\n            </>\n        );\n    } else {\n        preview = <div></div>;\n    }\n\n    const handleImageChange = (e) => {\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        reader.onloadend = () => {\n            setState({\n                file: file,\n                previewUrl: reader.result,\n            });\n        };\n\n        reader.readAsDataURL(file);\n    };\n\n    const handleClose = (e) => {\n        setState({\n            file: '',\n            previewUrl: '',\n        });\n        preview = <div></div>;\n    };\n\n    const handleSubmit = (values, { setSubmitting }) => {\n        setPostState(<CircularProgress style={{ height: '40px', width: '35px' }} />);\n        uploadImage(state.file).then(async (res) => {\n            await setPost({\n                query: {\n                    login: user.login,\n                    text: values.text,\n                    photo: res,\n                    user: { login: user.login, avatar: user.avatar },\n                },\n                token: token,\n                setSubmitting,\n            });\n            values.text = '';\n            setPostState(translate['newsfeed.post']);\n            setState({ file: '', previewUrl: '' });\n        });\n    };\n\n    useEffect(() => {\n        setPostState(translate['newsfeed.post']);\n    }, [language, setPostState]);\n\n    return (\n        <Paper>\n            <Formik\n                initialValues={initialValues}\n                onSubmit={handleSubmit}\n                validationSchema={PostSchema}\n            >\n                {({ submitForm, isSubmitting }) => (\n                    <form className={styles.form}>\n                        <div className={styles.inputContainer}>\n                            <Avatar aria-label=\"recipe\" className={styles.avatar}>\n                                {user?.avatar ? (\n                                    <img src={user.avatar} alt=\"Avatar\" />\n                                ) : (\n                                    <img src={userAvatar} alt=\"Avatar\" />\n                                )}\n                            </Avatar>\n                            <Field\n                                placeholder={translate['newsfeed.placeholder']}\n                                variant=\"outlined\"\n                                className={styles.input}\n                                multiline={true}\n                                name=\"text\"\n                                component={TextField}\n                            />\n                        </div>\n                        <div className={styles.imgPreview}>{preview}</div>\n                        <div className={styles.inputContainer}>\n                            <div className={styles.inputWrapper}>\n                                <input\n                                    name=\"file\"\n                                    type=\"file\"\n                                    id=\"inputFile\"\n                                    onChange={(e) => handleImageChange(e)}\n                                    accept=\"image/x-png,image/gif,image/jpeg\"\n                                    className={styles.inputFile}\n                                    multiple\n                                />\n                                <label htmlFor=\"inputFile\" className={styles.inputFileButton}>\n                                    <AttachFileIcon className={styles.inputFileButtonImg} />\n                                </label>\n                            </div>\n\n                            <button\n                                disabled={isSubmitting}\n                                className={styles.submitButton}\n                                type=\"submit\"\n                                onClick={submitForm}\n                            >\n                                {postState}\n                            </button>\n\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={isSubmitting}\n                                className={styles.submitButton}\n                                onClick={submitForm}\n                                startIcon={<AttachFileIcon />}\n                            >\n                                {/* <AttachFileIcon /> */}\n                                Send file\n                            </Button>\n\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={isSubmitting}\n                                className={styles.submitButton}\n                                onClick={submitForm}\n                            >\n                                {postState}\n                            </Button>\n                        </div>\n                    </form>\n                )}\n            </Formik>\n        </Paper>\n    );\n}\n\nconst mapStateToProps = function (state) {\n    return {\n        language: state.app.language,\n        user: state.auth.user,\n        token: state.auth.token,\n    };\n};\n\nexport default compose(\n    connect(mapStateToProps, { getPosts, setPost }),\n    withLogoutRedirect,\n)(NewsFeed);\n","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\NewsReducer.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\api\\api.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\NewsFeed\\helper.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\index.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\hoc\\withAuthRedirect.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Header\\parts\\MobileMenu.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Header\\parts\\DesktopMenu.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\DarkTheme.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\LightTheme.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\russian.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\english.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Post\\Post.js",["139"],"import { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport styles from './Post.module.css';\nimport { Formik, Field } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport {\n    Card,\n    CardHeader,\n    CardMedia,\n    CardContent,\n    CardActions,\n    Avatar,\n    IconButton,\n    Typography,\n    Collapse,\n    Paper,\n} from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteIconBorder from '@material-ui/icons/FavoriteBorder';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport userAvatar from './assets/images/user.svg';\nimport SendIcon from '@material-ui/icons/Send';\nimport { setComment, getComments, setLike } from '../../redux/reducers/NewsReducer';\nimport * as Yup from 'yup';\nimport russian from '../../languages/russian';\nimport english from '../../languages/english';\n\nconst CommentSchema = Yup.object().shape({\n    text: Yup.string().min(1, 'Too Short!'),\n});\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: 650,\n        margin: 'auto',\n        marginTop: 10,\n        marginBottom: 10,\n        padding: '0px 20px 20px',\n        [theme.breakpoints.down('700')]: {\n            width: 350,\n        },\n        backgroundColor: `${theme.palette.post.default} !important`,\n    },\n    content: {\n        borderBottom: `4px solid`,\n        borderColor: `${theme.palette.background.default} !important`,\n    },\n    header: {\n        fontSize: 17,\n        fontWeight: 450,\n    },\n    contentHeader: {\n        padding: `10px 0px`,\n    },\n    media: {\n        height: 0,\n        backgroundSize: '100% 100%',\n        paddingTop: '56.25%',\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    icon: {\n        font: 50,\n    },\n    commentSection: {\n        padding: '15px 0',\n    },\n    paper: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 700,\n        boxShadow: 'none',\n        backgroundColor: `${theme.palette.background.default} !important`,\n    },\n    avatar: {\n        backgroundColor: `#5181b8!important`,\n    },\n    input: {\n        border: '2px solid',\n        borderRadius: '5px',\n        borderColor: `${theme.palette.primary.main} !important`,\n        marginLeft: theme.spacing(1),\n        flex: 1,\n        padding: '5px 15px ',\n    },\n    iconButton: {\n        padding: 10,\n    },\n    liked: {\n        font: 50,\n        color: '#FF0000',\n    },\n    text: {\n        color: `${theme.palette.newsfeed.contrastText} !important`,\n        fontSize: '1rem',\n    },\n    icon: {\n        color: `${theme.palette.newsfeed.contrastText} !important`,\n        fontSize: '1.5rem',\n    },\n}));\n\nconst Post = (props) => {\n    const { posts, post, user, token, language, setComment, getComments, setLike } = props;\n\n    const classes = useStyles();\n\n    const translate = language === 'english' ? english : russian;\n    const initialValues = { text: '' };\n    const [expanded, setExpanded] = useState(false);\n    const [liked, setLiked] = useState(() => {\n        if (!post.likes.length) {\n            return false;\n        }\n        if (\n            post.likes.find((el) => {\n                return el.postId === post.id && el.userId === user.id;\n            })\n        ) {\n            return true;\n        }\n        return false;\n    });\n    const [postState, setPostState] = useState(<SendIcon />);\n\n    const handleExpandClick = () => {\n        getComments({ posts, postId: post.id, token });\n        setExpanded(!expanded);\n    };\n\n    const handleLikeClick = async () => {\n        await setLike({ posts, postId: post.id, userId: user.id, token });\n        setLiked(() => {\n            if (\n                post.likes.find((el) => {\n                    return el.postId === post.id && el.userId === user.id;\n                })\n            ) {\n                return true;\n            }\n            return false;\n        });\n    };\n\n    const handleSubmit = async (values, { setSubmitting }) => {\n        setPostState(<CircularProgress style={{ height: '40px', width: '35px' }} />);\n        await setComment({\n            posts,\n            post,\n            token,\n            query: {\n                postId: post.id,\n                text: values.text,\n                user: { login: user.login, avatar: user.avatar },\n            },\n            setSubmitting,\n        });\n        values.text = '';\n        setPostState(<SendIcon />);\n    };\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                classes={{\n                    title: classes.header,\n                }}\n                avatar={\n                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                        {post.user?.avatar ? (\n                            <img src={post.user.avatar} alt=\"Avatar\" />\n                        ) : (\n                            <img src={userAvatar} alt=\"Avatar\" />\n                        )}\n                    </Avatar>\n                }\n                title={post.user.login}\n            />\n\n            {post.photo ? (\n                <CardMedia\n                    className={classes.media}\n                    image={post.photo}\n                    title=\"Post image\"\n                    src={post.photo}\n                />\n            ) : null}\n\n            {post.text ? (\n                <CardContent className={classes.content}>\n                    <Typography className={classes.text}>{post.text}</Typography>\n                </CardContent>\n            ) : null}\n\n            <CardActions disableSpacing className={classes.content}>\n                <IconButton\n                    className={liked ? classes.liked : classes.icon}\n                    aria-label=\"like\"\n                    onClick={handleLikeClick}\n                >\n                    {liked ? <FavoriteIcon /> : <FavoriteIconBorder />}\n\n                    <Typography className={classes.icon}>{post.likes.length} </Typography>\n                </IconButton>\n\n                <IconButton aria-label=\"comment\" onClick={handleExpandClick}>\n                    <CommentIcon />\n                    <Typography className={classes.icon}>{post.commentsCount}</Typography>\n                </IconButton>\n            </CardActions>\n\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit className={classes.commentSection}>\n                {post.comments?.map((comment) => {\n                    return (\n                        <CardContent className={classes.content}>\n                            <CardHeader\n                                classes={{\n                                    title: classes.header,\n                                }}\n                                className={classes.contentHeader}\n                                avatar={\n                                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                                        {post.user.avatar ? (\n                                            <img src={comment.user.avatar} alt=\"Avatar\" />\n                                        ) : (\n                                            <img src={userAvatar} alt=\"Avatar\" />\n                                        )}\n                                    </Avatar>\n                                }\n                                title={comment.user.login ? comment.user.login : 'undefined'}\n                                subheader={<Typography>{comment.text}</Typography>}\n                            />\n                        </CardContent>\n                    );\n                })}\n\n                <Formik\n                    initialValues={initialValues}\n                    onSubmit={handleSubmit}\n                    validationSchema={CommentSchema}\n                >\n                    {({ submitForm, isSubmitting }) => (\n                        <form>\n                            <div className={styles.inputContainer}>\n                                <Paper component=\"form\" className={classes.paper}>\n                                    <Field\n                                        className={classes.input}\n                                        multiline={true}\n                                        component={TextField}\n                                        name=\"text\"\n                                        fullWidth={true}\n                                        placeholder={translate['post.placeholder']}\n                                    />\n                                    <IconButton\n                                        type=\"submit\"\n                                        className={classes.iconButton}\n                                        aria-label=\"search\"\n                                        onClick={submitForm}\n                                        disabled={isSubmitting}\n                                    >\n                                        {postState}\n                                    </IconButton>\n                                </Paper>\n                            </div>\n                        </form>\n                    )}\n                </Formik>\n            </Collapse>\n        </Card>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    user: state.auth.user,\n    token: state.auth.token,\n    posts: state.news.posts,\n    language: state.app.language,\n});\n\nexport default compose(\n    connect(mapStateToProps, { setComment, getComments, setLike }),\n    //withLoginRedirect\n)(Post);\n","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Feed\\Feed.js",["140"],"<<<<<<< HEAD\nimport React from 'react';\n=======\nimport React, { useEffect } from 'react';\n>>>>>>> adbf949f4113be66d87a4c6f48bf10653e34dab9\nimport { compose } from 'redux';\nimport { withLogoutRedirect } from '../../hoc/withAuthRedirect';\nimport { Container } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport Post from '../Post/Post';\nimport NewsFeed from '../NewsFeed/NewsFeed';\n<<<<<<< HEAD\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    main: {\n        padding: '30px 0',\n    },\n}));\n\nfunction Feed({ posts }) {\n    const classes = useStyles();\n\n    return (\n        <main className={classes.main}>\n            <Container maxWidth=\"md\">\n                <NewsFeed />\n\n                {posts.map((post) => (\n                    <Post key={post.id} post={post} />\n=======\nimport { getPosts } from '../../redux/reducers/NewsReducer';\n\nfunction Feed({ posts, token, getPosts }) {\n    useEffect(() => {\n        getPosts(token);\n    }, []);\n\n    return (\n        <main>\n            <Container maxWidth=\"sm\">\n                <NewsFeed />\n\n                {posts.map((postInfo) => (\n                    <Post key={postInfo.id} post={postInfo} />\n>>>>>>> adbf949f4113be66d87a4c6f48bf10653e34dab9\n                ))}\n            </Container>\n        </main>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    posts: state.news.posts,\n<<<<<<< HEAD\n});\n\nexport default compose(connect(mapStateToProps), withLogoutRedirect)(Feed);\n=======\n    token: state.auth.token,\n});\n\nexport default compose(connect(mapStateToProps, { getPosts }), withLogoutRedirect)(Feed);\n>>>>>>> adbf949f4113be66d87a4c6f48bf10653e34dab9\n","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\ChatReducer.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Dialogs\\Chat\\Chat.js",["141","142","143","144","145"],"import { useEffect } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withLogoutRedirect } from '../../../hoc/withAuthRedirect';\nimport { getDialogs, getMessages } from '../../../redux/reducers/ChatReducer';\nimport { getLanguage } from '../../../languages/index';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Formik, Field, Form } from 'formik';\nimport { useState } from 'react';\nimport { Paper } from '@material-ui/core';\n\nimport Grid from '@material-ui/core/Grid';\nimport { TextField } from 'formik-material-ui';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport messages from '../last-messages.json';\nimport Navbar from './Navbar/Navbar';\nimport styles from './Chat.module.css';\nimport IconButton from '@material-ui/core/IconButton';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport Search from '../Search/Search';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n    messageArea: {\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: theme.palette.messageArea.background,\n        height: 'calc(100vh - 65px - 71px - 80px - 76px)',\n        fontSize: '20px',\n        overflowY: 'scroll',\n    },\n    listItemFriend: {\n        backgroundColor: theme.palette.chatMessagesFriend.background,\n        width: 'fit-content',\n        borderRadius: '15px',\n        margin: '0 0 10px 10px',\n        paddingTop: '0px',\n        paddingBottom: '0px',\n        maxWidth: '500px',\n    },\n    listItemSelf: {\n        backgroundColor: '#9bc4fd',\n        width: 'fit-content',\n        borderRadius: '15px',\n        margin: '0 10px 10px 10px',\n        paddingTop: '0px',\n        paddingBottom: '0px',\n        alignSelf: 'flex-end',\n        maxWidth: '500px',\n    },\n    input: {\n        display: 'none',\n    },\n    borderRight500: {\n        borderRight: '1px solid',\n        borderRightColor: theme.palette.chat.borderColor,\n    },\n}));\n\nconst Chat = (props) => {\n    const { token, getMessages, getDialogs, language } = props;\n    const translate = getLanguage(language);\n    const initialValues = { messageInput: '' };\n    const postState = useState(<SendIcon />);\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        getDialogs(token, 1);\n    }, []);\n\n    const onClickDialog = () => {\n        getMessages(token, 1);\n    };\n\n    const handleSubmit = () => {\n        console.log('click on submit');\n    };\n\n    const validate = (values) => {\n        const errors = {};\n\n        if (!values.messageInput) {\n            errors.messageInput = '';\n        }\n\n        return errors;\n    };\n\n    return (\n        <Grid container className={styles.chatSection}>\n            <Grid item xs={3} className={classes.borderRight500}>\n                <div className={styles.dialogs}>\n                    <div style={{ padding: '12px' }}>\n                        <Search />\n                    </div>\n\n                    <List className={styles.list}>\n                        {messages.map(({ id, name, message, avatar }) => (\n                            <ListItem key={id} button onClick={onClickDialog}>\n                                <ListItemAvatar>\n                                    <Avatar alt={name} src={avatar}>\n                                        A\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={name} secondary={message} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </div>\n            </Grid>\n\n            <Grid item xs={9}>\n                <Grid item xs={12}>\n                    <Navbar />\n                </Grid>\n\n                <List className={classes.messageArea}>\n                    <ListItem className={classes.listItemFriend}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={messages[0].name}\n                                src={messages[0].avatar}\n                            />\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[0].name}\n                            secondary={messages[0].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemSelf}>\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[1].name}\n                            secondary={messages[1].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemFriend}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={messages[0].name}\n                                src={messages[0].avatar}\n                            />\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[0].name}\n                            secondary={messages[2].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemSelf}>\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[1].name}\n                            secondary={messages[3].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemFriend}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={messages[0].name}\n                                src={messages[0].avatar}\n                            />\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[0].name}\n                            secondary={messages[4].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemFriend}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={messages[0].name}\n                                src={messages[0].avatar}\n                            />\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[0].name}\n                            secondary={messages[4].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemFriend}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={messages[0].name}\n                                src={messages[0].avatar}\n                            />\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[0].name}\n                            secondary={messages[4].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemFriend}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={messages[0].name}\n                                src={messages[0].avatar}\n                            />\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[0].name}\n                            secondary={messages[4].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemFriend}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={messages[0].name}\n                                src={messages[0].avatar}\n                            />\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[0].name}\n                            secondary={messages[4].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemFriend}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={messages[0].name}\n                                src={messages[0].avatar}\n                            />\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[0].name}\n                            secondary={messages[4].message}\n                        ></ListItemText>\n                    </ListItem>\n\n                    <ListItem className={classes.listItemSelf}>\n                        <ListItemText\n                            className={classes.listItemText}\n                            primary={messages[1].name}\n                            secondary={messages[5].message}\n                        ></ListItemText>\n                    </ListItem>\n                </List>\n\n                {/* <Grid container className={styles.sendMessageContainer}>\n                    <Grid item xs={1} align=\"left\" className={styles.gridClip}>\n                        <input\n                            accept=\"image/*\"\n                            className={classes.input}\n                            id=\"icon-button-file\"\n                            type=\"file\"\n                        />\n\n                        <label htmlFor=\"icon-button-file\">\n                            <IconButton aria-label=\"upload picture\" component=\"span\">\n                                <AttachFileIcon />\n                            </IconButton>\n                        </label>\n                    </Grid>\n\n                    <Grid item xs={9}> */}\n                <Formik initialValues={initialValues} onSubmit={handleSubmit} validate={validate}>\n                    {({ submitForm, isSubmitting }) => (\n                        <Form className={styles.messageForm}>\n                            {/* <div className={styles.inputContainer}>\n                                        <Paper component=\"form\" className={classes.paper}> */}\n                            <input\n                                accept=\"image/*\"\n                                className={classes.input}\n                                id=\"icon-button-file\"\n                                type=\"file\"\n                            />\n\n                            <label htmlFor=\"icon-button-file\">\n                                <IconButton\n                                    aria-label=\"upload picture\"\n                                    component=\"span\"\n                                    disabled={isSubmitting}\n                                >\n                                    <AttachFileIcon />\n                                </IconButton>\n                            </label>\n\n                            <Field\n                                component={TextField}\n                                name=\"messageInput\"\n                                multiline={true}\n                                label={translate['chat.messagePlaceholder']}\n                                variant=\"outlined\"\n                                fullWidth={true}\n                            />\n\n                            <IconButton\n                                className={classes.iconButton}\n                                aria-label=\"search\"\n                                disabled={isSubmitting}\n                                onClick={submitForm}\n                            >\n                                {postState}\n                            </IconButton>\n                            {/* </Paper>\n                                    </div> */}\n                        </Form>\n                    )}\n                </Formik>\n                {/* </Grid>\n                </Grid> */}\n            </Grid>\n        </Grid>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    token: state.auth.token,\n    language: state.app.language,\n});\n\nexport default compose(\n    connect(mapStateToProps, { getMessages, getDialogs }),\n    withLogoutRedirect,\n)(Chat);\n","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Dialogs\\Chat\\Navbar\\Navbar.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Post\\helper.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Dialogs\\Search\\Search.js",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":14,"column":8,"nodeType":"152","messageId":"153","endLine":14,"endColumn":16},{"ruleId":"154","severity":1,"message":"155","line":25,"column":8,"nodeType":"156","endLine":25,"endColumn":10,"suggestions":"157"},{"ruleId":"154","severity":1,"message":"158","line":36,"column":8,"nodeType":"156","endLine":36,"endColumn":10,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":54,"column":17,"nodeType":"162","endLine":54,"endColumn":68},{"ruleId":"154","severity":1,"message":"163","line":107,"column":8,"nodeType":"156","endLine":107,"endColumn":32,"suggestions":"164"},{"ruleId":"150","severity":1,"message":"165","line":19,"column":5,"nodeType":"152","messageId":"153","endLine":19,"endColumn":9},{"ruleId":"154","severity":1,"message":"158","line":13,"column":8,"nodeType":"156","endLine":13,"endColumn":10,"suggestions":"166"},{"ruleId":"150","severity":1,"message":"167","line":10,"column":10,"nodeType":"152","messageId":"153","endLine":10,"endColumn":15},{"ruleId":"150","severity":1,"message":"168","line":19,"column":8,"nodeType":"152","messageId":"153","endLine":19,"endColumn":11},{"ruleId":"150","severity":1,"message":"169","line":27,"column":13,"nodeType":"152","messageId":"153","endLine":27,"endColumn":16},{"ruleId":"150","severity":1,"message":"170","line":28,"column":8,"nodeType":"152","messageId":"153","endLine":28,"endColumn":14},{"ruleId":"154","severity":1,"message":"171","line":77,"column":8,"nodeType":"156","endLine":77,"endColumn":10,"suggestions":"172"},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"no-unused-vars","'NewsFeed' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initializeApp' and 'token'. Either include them or remove the dependency array. If 'initializeApp' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["175"],"React Hook useEffect has missing dependencies: 'getPosts' and 'token'. Either include them or remove the dependency array. If 'getPosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["176"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'translate'. Either include it or remove the dependency array.",["177"],"'Grid' is defined but never used.",["178"],"'Paper' is defined but never used.","'Fab' is defined but never used.","'Yup' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'getDialogs' and 'token'. Either include them or remove the dependency array.",["179"],"no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"182","fix":"186"},{"desc":"187","fix":"188"},"Update the dependencies array to be: [initializeApp, token]",{"range":"189","text":"190"},"Update the dependencies array to be: [getPosts, token]",{"range":"191","text":"192"},"Update the dependencies array to be: [language, setPostState, translate]",{"range":"193","text":"194"},{"range":"195","text":"192"},"Update the dependencies array to be: [getDialogs, token]",{"range":"196","text":"197"},[1015,1017],"[initializeApp, token]",[1290,1292],"[getPosts, token]",[3381,3405],"[language, setPostState, translate]",[464,466],[2635,2637],"[getDialogs, token]"]