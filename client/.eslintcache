[{"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\index.js":"1","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\App.js":"2","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\store.js":"3","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\AuthReducer.js":"4","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Header\\Header.js":"5","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Error\\Error.js":"6","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Login\\Login.js":"7","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\api\\api.js":"8","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\hoc\\withAuthRedirect.js":"9","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Upload\\Upload.js":"10","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Join\\Join.js":"11","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\helpers\\localStorage.js":"12","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\AppReducer.js":"13","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Footer\\Footer.js":"14","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\NewsReducer.js":"15","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\index.js":"16","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Post\\Post.js":"17","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Newsfeed\\Newsfeed.js":"18","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\index.js":"19","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Newsfeed\\helper.js":"20","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\english.js":"21","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\russian.js":"22","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\LightTheme.js":"23","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\DarkTheme.js":"24","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\NewsFeed\\NewsFeed.js":"25","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\NewsFeed\\helper.js":"26"},{"size":450,"mtime":1611675527805,"results":"27","hashOfConfig":"28"},{"size":1954,"mtime":1611927093947,"results":"29","hashOfConfig":"28"},{"size":953,"mtime":1611905835096,"results":"30","hashOfConfig":"28"},{"size":2353,"mtime":1611937156493,"results":"31","hashOfConfig":"28"},{"size":3601,"mtime":1611937435719,"results":"32","hashOfConfig":"28"},{"size":1321,"mtime":1611930735432,"results":"33","hashOfConfig":"28"},{"size":6369,"mtime":1611937258883,"results":"34","hashOfConfig":"28"},{"size":1717,"mtime":1611905531953,"results":"35","hashOfConfig":"28"},{"size":764,"mtime":1611905531971,"results":"36","hashOfConfig":"28"},{"size":508,"mtime":1610905286954,"results":"37","hashOfConfig":"28"},{"size":7257,"mtime":1611937182568,"results":"38","hashOfConfig":"28"},{"size":485,"mtime":1611675527811,"results":"39","hashOfConfig":"28"},{"size":1713,"mtime":1611926957198,"results":"40","hashOfConfig":"28"},{"size":4412,"mtime":1611941149845,"results":"41","hashOfConfig":"28"},{"size":3874,"mtime":1611905531976,"results":"42","hashOfConfig":"28"},{"size":182,"mtime":1611926970905,"results":"43","hashOfConfig":"28"},{"size":7505,"mtime":1611905531965,"results":"44","hashOfConfig":"28"},{"size":5255,"mtime":1611906351476,"results":"45","hashOfConfig":"28"},{"size":178,"mtime":1611926985032,"results":"46","hashOfConfig":"28"},{"size":512,"mtime":1611905531964,"results":"47","hashOfConfig":"28"},{"size":1534,"mtime":1611937205877,"results":"48","hashOfConfig":"28"},{"size":2168,"mtime":1611937213355,"results":"49","hashOfConfig":"28"},{"size":1666,"mtime":1611940928767,"results":"50","hashOfConfig":"28"},{"size":1666,"mtime":1611940952443,"results":"51","hashOfConfig":"28"},{"size":5255,"mtime":1611906351476,"results":"52","hashOfConfig":"28"},{"size":512,"mtime":1611905531964,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"cpe4bj",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\index.js",[],["111","112"],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\App.js",["113"],"import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { initializeApp } from './redux/reducers/AppReducer';\nimport { getTheme } from './themes/index';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { LinearProgress } from '@material-ui/core';\nimport Header from './components/Header/Header';\nimport Login from './components/Login/Login';\nimport Join from './components/Join/Join';\nimport NewsFeed from './components/NewsFeed/NewsFeed';\nimport Error from './components/Error/Error';\nimport Footer from './components/Footer/Footer';\n\nconst App = ({ token, theme, initialized, initializeApp }) => {\n    const currentTheme = getTheme(theme);\n\n    useEffect(() => {\n        initializeApp(token);\n    }, []);\n\n    return (\n        <ThemeProvider theme={createMuiTheme(currentTheme)}>\n            <>\n                <CssBaseline />\n                {initialized ? (\n                    <>\n                        <Header />\n\n                        <Switch>\n                            <Redirect exact from=\"/\" to=\"/feed\" />\n                            <Route path=\"/login\" exact component={Login} />\n                            <Route path=\"/join\" exact component={Join} />\n                            <Route path=\"/feed\" exact component={NewsFeed} />\n                            <Route component={Error} />\n                        </Switch>\n\n                        <Footer />\n                    </>\n                ) : (\n                    <LinearProgress />\n                )}\n            </>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized,\n    token: state.auth.token,\n    theme: state.app.theme,\n});\n\nexport default connect(mapStateToProps, { initializeApp })(App);\n","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\store.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\AuthReducer.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Header\\Header.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Error\\Error.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Login\\Login.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\api\\api.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\hoc\\withAuthRedirect.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Upload\\Upload.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Join\\Join.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\helpers\\localStorage.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\AppReducer.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\redux\\reducers\\NewsReducer.js",["114","115","116","117"],"import { NewsAPI } from '../../api/api';\n\nconst SET_POSTS = '/news/SET_POSTS';\nconst SET_POST = '/news/SET_POST';\nconst SET_COMMENTS = '/news/SET_COMMENTS';\nconst SET_COMMENT = '/news/SET_COMMENT';\nconst SET_LIKE = '/news/SET_LIKE';\nconst GET_LIKE = '/news/GET_LIKE';\n\nconst initialState = {\n    posts: [],\n};\n\nexport const NewsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_POSTS:\n            return {\n                ...state,\n                posts: [...action.posts],\n            };\n        case SET_POST:\n            return {\n                ...state,\n                posts: [action.post, ...state.posts],\n            };\n        case SET_COMMENTS:\n            return {\n                ...state,\n                posts: state.posts.map((post, index) => {\n                    if (index === action.index) {\n                        post.comments = [...action.comments].reverse();\n                    }\n                    return post;\n                }),\n            };\n        case SET_COMMENT:\n            return {\n                ...state,\n                posts: state.posts.map((post, index) => {\n                    if (index === action.index) {\n                        if (!post.comments) {\n                            post.comments = [];\n                        }\n                        post.comments.push(action.comment);\n                    }\n                    return post;\n                }),\n            };\n            \n        default:\n            return state;\n    }\n};\n\nconst setPostsAction = (posts) => ({\n    type: SET_POSTS,\n    posts,\n});\n\nconst setPostAction = (post) => ({\n    type: SET_POST,\n    post,\n});\n\nconst setCommentsAction = (comments, index) => ({\n    type: SET_COMMENTS,\n    comments,\n    index,\n});\n\nconst setCommentAction = (userId, index) => ({\n    type: SET_COMMENT,\n    userId,\n    index,\n});\n\nconst setLikeAction = (userId, index) => ({\n    type: SET_COMMENTS,\n    userId,    \n    index,\n});\n\nconst getLikeAction = (comment, index) => ({\n    type: SET_COMMENT,\n    comment,\n    index,\n});\n\nexport const getPosts = (token) => {\n    return async (dispatch) => {\n        const response = await NewsAPI.getPosts(token);\n\n        if (response.status === 200 && response.data.status === 200) {\n            const { posts } = response.data;\n            dispatch(setPostsAction(posts));\n        }\n    };\n};\n\nexport const setPost = ({ token, query }) => {\n    return async (dispatch) => {\n        const response = await NewsAPI.sendPost(token, query);\n\n        if (response.status === 200 && response.data.status === 200) {\n            const { post } = response.data;\n\n            console.log({\n                ...post,\n                user: query.user,\n            });\n\n            dispatch(\n                setPostAction({\n                    ...post,\n                    user: query.user,\n                }),\n            );\n        }\n    };\n};\n\nexport const setComment = ({ posts, post, token, query }) => {\n    return async (dispatch) => {\n        const index = posts.findIndex((el) => {\n            return el.id === post.id;\n        });\n\n        const response = await NewsAPI.sendComment(token, query);\n\n        console.log({\n            query,\n            response: response.data,\n        });\n\n        if (response.status === 200 && response.data.status === 200) {\n            dispatch(setCommentAction(query, index));\n        }\n    };\n};\n\nexport const getComments = ({ posts, postId, token }) => {\n    return async (dispatch) => {\n        const index = posts.findIndex((el) => {\n            return el.id === postId;\n        });\n\n        const response = await NewsAPI.getComments(token, postId);\n\n        if (response.status === 200 && response.data.status === 200) {\n            const { comments } = response.data;\n            dispatch(setCommentsAction(comments, index));\n        }\n    };\n};\n","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\index.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Post\\Post.js",["118","119"],"import { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport styles from './Post.module.css';\nimport { Formik } from 'formik';\nimport {\n    Card,\n    CardHeader,\n    CardMedia,\n    CardContent,\n    CardActions,\n    Avatar,\n    IconButton,\n    Typography,\n    Collapse,\n    InputBase,\n    Paper,\n} from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport userAvatar from './assets/images/user.svg';\nimport { withLoginRedirect } from '../../hoc/withAuthRedirect';\nimport SendIcon from '@material-ui/icons/Send';\nimport loader from './assets/images/loader.gif';\n\nimport { setComment, getComments } from '../../redux/reducers/NewsReducer';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: 650,\n        margin: 'auto',\n        marginTop: 10,\n        marginBottom: 10,\n        boxShadow: '0px 0px 10px 3px #b9b8b8',\n        [theme.breakpoints.down('700')]: {\n            width: 350,\n        },\n    },\n    content: {\n        borderBottom: `2px solid grey`,\n    },\n    contentHeader: {\n        padding: `10px 0px`,\n    },\n    media: {\n        height: 0,\n        backgroundSize: '100% 100%',\n        paddingTop: '56.25%',\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    avatar: {\n        backgroundColor: red[250],\n    },\n    icon: {\n        font: 50,\n    },\n    commentSection: {\n        padding: '15px 0',\n    },\n    paper: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 700,\n        boxShadow: 'none',\n    },\n    input: {\n        border: '2px solid rgb(180, 178, 178)',\n        borderRadius: '5px',\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    liked: {\n        font: 50,\n        color: '#FF0000',\n    },\n}));\n\nconst Post = (props) => {\n    const { posts, post, user, token, setComment, getComments } = props;\n\n    const classes = useStyles();\n\n    const [expanded, setExpanded] = useState(false);\n    const [liked, setLiked] = useState(false);\n    const [postState, setPostState] = useState(<SendIcon />);\n    const [textState, setTextState] = useState('');\n\n    const handleExpandClick = () => {\n        getComments({ posts, postId: post.id, token });\n        setExpanded(!expanded);\n    };\n\n    const handleLikeClick = () => {\n        setLiked(!liked);\n    };\n\n    const handleTextChange = (e) => {\n        e.preventDefault();\n        setTextState(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setPostState(\n            <img src={loader} alt={'Loading...'} style={{ height: '40px', width: '35px' }} />,\n        );\n        setComment({\n            posts,\n            post,\n            token,\n            query: {\n                postId: post.id,\n                text: textState,\n                user: { login: user.login, avatar: user.avatar },\n            },\n        });\n        setPostState(<SendIcon />);\n        setTextState('');\n    };\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                        {post.user?.avatar ? (\n                            <img src={post.user.avatar} alt=\"Avatar\" />\n                        ) : (\n                            <img src={userAvatar} alt=\"Avatar\" />\n                        )}\n                    </Avatar>\n                }\n                title={post.user.login}\n            />\n\n            {post.photo ? (\n                <CardMedia\n                    className={classes.media}\n                    image={post.photo}\n                    title=\"Post image\"\n                    src={post.photo}\n                />\n            ) : null}\n\n            {post.text ? (\n                <CardContent className={classes.content}>\n                    <Typography color=\"textSecondary\">{post.text}</Typography>\n                </CardContent>\n            ) : null}\n\n            <CardActions disableSpacing className={classes.content}>\n                <IconButton\n                    className={liked ? classes.liked : classes.icon}\n                    aria-label=\"like\"\n                    onClick={handleLikeClick}\n                >\n                    <FavoriteIcon />\n                    {post.likesCount}\n                </IconButton>\n\n                <IconButton aria-label=\"comment\" onClick={handleExpandClick}>\n                    <CommentIcon />\n                    <Typography>{post.commentsCount}</Typography>\n                </IconButton>\n            </CardActions>\n\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit className={classes.commentSection}>\n                {post.comments?.map((comment) => {\n                    return (\n                        <CardContent className={classes.content}>\n                            <CardHeader\n                                className={classes.contentHeader}\n                                avatar={\n                                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                                        {post.user.avatar ? (\n                                            <img src={comment.user.avatar} alt=\"Avatar\" />\n                                        ) : (\n                                            <img src={userAvatar} alt=\"Avatar\" />\n                                        )}\n                                    </Avatar>\n                                }\n                                title={comment.user.login ? comment.user.login : 'undefined'}\n                            />\n                            <Typography>{comment.text}</Typography>\n                        </CardContent>\n                    );\n                })}\n\n                <form onSubmit={(e) => handleSubmit(e)}>\n                    <div className={styles.inputContainer}>\n                        <Paper component=\"form\" className={classes.paper}>\n                            <InputBase\n                                className={classes.input}\n                                multiline={true}\n                                onChange={(e) => handleTextChange(e)}\n                                value={textState}\n                            />\n                            <IconButton\n                                type=\"submit\"\n                                className={classes.iconButton}\n                                aria-label=\"search\"\n                                onClick={(e) => handleSubmit(e)}\n                                disabled={textState ? false : true}\n                            >\n                                {postState}\n                            </IconButton>\n                        </Paper>\n                    </div>\n                </form>\n            </Collapse>\n        </Card>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    user: state.auth.user,\n    token: state.auth.token,\n    posts: state.news.posts,\n});\n\nexport default compose(\n    connect(mapStateToProps, { setComment, getComments }),\n    //withLoginRedirect\n)(Post);\n","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Newsfeed\\Newsfeed.js",["120","121","122","123","124","125","126"],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\index.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\Newsfeed\\helper.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\english.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\languages\\russian.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\LightTheme.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\themes\\DarkTheme.js",[],"C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\NewsFeed\\NewsFeed.js",["127","128","129","130","131","132","133"],"import React, { useState, useEffect, useRef } from 'react';\nimport { compose } from 'redux';\nimport { withLoginRedirect } from '../../hoc/withAuthRedirect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from './NewsFeed.module.css';\nimport { Container, Input } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport Post from '../Post/Post';\nimport loader from './assets/images/loader.gif';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { uploadImage } from './helper.js';\nimport { getPosts, setPost } from '../../redux/reducers/NewsReducer';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport russian from '../../languages/russian';\nimport english from '../../languages/english';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: '100%',\n        paddingTop: 70,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}));\n\nfunction Newsfeed({ children, language, user, token, getPosts, setPost }) {\n    useEffect(() => {\n        getPosts(token);\n    }, []);\n\n    const currentLanguage = language === 'ENGLISH' ? english : russian;\n    const classes = useStyles();\n    const [postState, setPostState] = useState(<b>Post</b>);\n    const [textState, setTextState] = useState('');\n    const [state, setState] = useState({ file: '', imagePreviewUrl: '' });\n\n    let { imagePreviewUrl } = state;\n    let imagePreviewDiv = null;\n\n    if (imagePreviewUrl) {\n        imagePreviewDiv = (\n            <div>\n                <img src={imagePreviewUrl} alt={'Image Preview'} />\n                <button className={styles.closeButton} onClick={(e) => handleClose(e)}>\n                    <CloseIcon />\n                </button>\n            </div>\n        );\n    } else {\n        imagePreviewDiv = <div></div>;\n    }\n\n    function handleTextChange(e) {\n        setTextState(e.target.value);\n    }\n\n    function handleImageChange(e) {\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        reader.onloadend = () => {\n            setState({\n                file: file,\n                imagePreviewUrl: reader.result,\n            });\n        };\n\n        reader.readAsDataURL(file);\n    }\n\n    function handleClose(e) {\n        setState({\n            file: '',\n            imagePreviewUrl: '',\n        });\n        imagePreviewDiv = <div></div>;\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        setPostState(<CircularProgress style={{ height: '40px', width: '35px' }} />);\n        uploadImage(state.file).then((res) => {\n            setPost({\n                query: {\n                    login: user.login,\n                    text: `${textState}`,\n                    photo: res,\n                    user: { login: user.login, avatar: user.avatar },\n                },\n                token: token,\n            });\n            setPostState(<b>Post</b>);\n            setTextState('');\n            setState({ file: '', imagePreviewUrl: '' });\n        });\n    }\n\n    return (\n        <Container className={classes.root}>\n            <div className={styles.newPost}>\n                <form onSubmit={(e) => handleSubmit(e)}>\n                    <div className={styles.inputContainer}>\n                        <Input\n                            placeholder=\"What's new?\"\n                            className={styles.input}\n                            multiline={true}\n                            onChange={(e) => handleTextChange(e)}\n                            value={textState}\n                        />\n                        <div className={styles.inputWrapper}>\n                            <input\n                                name=\"file\"\n                                type=\"file\"\n                                id=\"inputFile\"\n                                onChange={(e) => handleImageChange(e)}\n                                accept=\"image/x-png,image/gif,image/jpeg\"\n                                className={styles.inputFile}\n                                multiple\n                            />\n                            <label for=\"inputFile\" className={styles.inputFileButton}>\n                                <GetAppIcon className={styles.inputFileButtonImg} />\n                            </label>\n                        </div>\n                    </div>\n                    <div className={styles.imgPreview}>{imagePreviewDiv}</div>\n                    <button\n                        className={styles.submitButton}\n                        type=\"submit\"\n                        onClick={(e) => handleSubmit(e)}\n                    >\n                        {postState}\n                    </button>\n                </form>\n            </div>\n\n            {children}\n        </Container>\n    );\n}\n\nconst mapStateToProps = function (state) {\n    return {\n        children: state.news.posts.map((el) => <Post post={el} />),\n        language: state.app.language,\n        user: state.auth.user,\n        token: state.auth.token,\n    };\n};\n\nexport default connect(mapStateToProps,{getPosts,setPost})(Newsfeed);\n//export default compose(connect(mapStateToProps,{getPosts,setPost}),withLoginRedirect)(Newsfeed);\n","C:\\Users\\grozz\\Desktop\\rsclone\\client\\src\\components\\NewsFeed\\helper.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":23,"column":8,"nodeType":"140","endLine":23,"endColumn":10,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":7,"column":7,"nodeType":"144","messageId":"145","endLine":7,"endColumn":15},{"ruleId":"142","severity":1,"message":"146","line":8,"column":7,"nodeType":"144","messageId":"145","endLine":8,"endColumn":15},{"ruleId":"142","severity":1,"message":"147","line":77,"column":7,"nodeType":"144","messageId":"145","endLine":77,"endColumn":20},{"ruleId":"142","severity":1,"message":"148","line":83,"column":7,"nodeType":"144","messageId":"145","endLine":83,"endColumn":20},{"ruleId":"142","severity":1,"message":"149","line":6,"column":10,"nodeType":"144","messageId":"145","endLine":6,"endColumn":16},{"ruleId":"142","severity":1,"message":"150","line":24,"column":10,"nodeType":"144","messageId":"145","endLine":24,"endColumn":27},{"ruleId":"142","severity":1,"message":"151","line":1,"column":38,"nodeType":"144","messageId":"145","endLine":1,"endColumn":44},{"ruleId":"142","severity":1,"message":"152","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":17},{"ruleId":"142","severity":1,"message":"150","line":3,"column":10,"nodeType":"144","messageId":"145","endLine":3,"endColumn":27},{"ruleId":"142","severity":1,"message":"153","line":9,"column":8,"nodeType":"144","messageId":"145","endLine":9,"endColumn":14},{"ruleId":"138","severity":1,"message":"154","line":31,"column":8,"nodeType":"140","endLine":31,"endColumn":10,"suggestions":"155"},{"ruleId":"142","severity":1,"message":"156","line":33,"column":11,"nodeType":"144","messageId":"145","endLine":33,"endColumn":26},{"ruleId":"157","severity":1,"message":"158","line":45,"column":17,"nodeType":"159","endLine":45,"endColumn":68},{"ruleId":"142","severity":1,"message":"151","line":1,"column":38,"nodeType":"144","messageId":"145","endLine":1,"endColumn":44},{"ruleId":"142","severity":1,"message":"152","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":17},{"ruleId":"142","severity":1,"message":"150","line":3,"column":10,"nodeType":"144","messageId":"145","endLine":3,"endColumn":27},{"ruleId":"142","severity":1,"message":"153","line":9,"column":8,"nodeType":"144","messageId":"145","endLine":9,"endColumn":14},{"ruleId":"138","severity":1,"message":"154","line":31,"column":8,"nodeType":"140","endLine":31,"endColumn":10,"suggestions":"160"},{"ruleId":"142","severity":1,"message":"156","line":33,"column":11,"nodeType":"144","messageId":"145","endLine":33,"endColumn":26},{"ruleId":"157","severity":1,"message":"158","line":45,"column":17,"nodeType":"159","endLine":45,"endColumn":68},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initializeApp' and 'token'. Either include them or remove the dependency array. If 'initializeApp' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["163"],"no-unused-vars","'SET_LIKE' is assigned a value but never used.","Identifier","unusedVar","'GET_LIKE' is assigned a value but never used.","'setLikeAction' is assigned a value but never used.","'getLikeAction' is assigned a value but never used.","'Formik' is defined but never used.","'withLoginRedirect' is defined but never used.","'useRef' is defined but never used.","'compose' is defined but never used.","'loader' is defined but never used.","React Hook useEffect has missing dependencies: 'getPosts' and 'token'. Either include them or remove the dependency array. If 'getPosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["164"],"'currentLanguage' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["165"],"no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"168","fix":"170"},"Update the dependencies array to be: [initializeApp, token]",{"range":"171","text":"172"},"Update the dependencies array to be: [getPosts, token]",{"range":"173","text":"174"},{"range":"175","text":"174"},[920,922],"[initializeApp, token]",[1144,1146],"[getPosts, token]",[1144,1146]]