[{"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/index.js":"1","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/App.js":"2","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/store.js":"3","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/reducers/ChatReducer.js":"4","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/reducers/AuthReducer.js":"5","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/reducers/AppReducer.js":"6","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/helpers/localStorage.js":"7","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Error/Error.js":"8","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Join/Join.js":"9","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Header/Header.js":"10","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Login/Login.js":"11","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Dialogs/Chat/Chat.js":"12","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/api/api.js":"13","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/hoc/withAuthRedirect.js":"14","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Dialogs/Chat/Navbar/Navbar.js":"15","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/themes/index.js":"16","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/NewsFeed/NewsFeed.js":"17","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Footer/Footer.js":"18","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/languages/index.js":"19","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Header/parts/MobileMenu.js":"20","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Header/parts/DesktopMenu.js":"21","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/NewsFeed/helper.js":"22","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/reducers/NewsReducer.js":"23","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/languages/english.js":"24","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/languages/russian.js":"25","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Post/Post.js":"26","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/themes/DarkTheme.js":"27","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/themes/LightTheme.js":"28","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Dialogs/Search/Search.js":"29"},{"size":384,"mtime":1612176395110,"results":"30","hashOfConfig":"31"},{"size":2084,"mtime":1612176784559,"results":"32","hashOfConfig":"31"},{"size":1030,"mtime":1612176395111,"results":"33","hashOfConfig":"31"},{"size":1523,"mtime":1612176395111,"results":"34","hashOfConfig":"31"},{"size":2353,"mtime":1612176395111,"results":"35","hashOfConfig":"31"},{"size":1713,"mtime":1612176395111,"results":"36","hashOfConfig":"31"},{"size":485,"mtime":1612176395111,"results":"37","hashOfConfig":"31"},{"size":1321,"mtime":1612176395107,"results":"38","hashOfConfig":"31"},{"size":7257,"mtime":1612176395108,"results":"39","hashOfConfig":"31"},{"size":3621,"mtime":1612176395108,"results":"40","hashOfConfig":"31"},{"size":6369,"mtime":1612176395109,"results":"41","hashOfConfig":"31"},{"size":7217,"mtime":1612263695266,"results":"42","hashOfConfig":"31"},{"size":2555,"mtime":1612176395106,"results":"43","hashOfConfig":"31"},{"size":764,"mtime":1612176395110,"results":"44","hashOfConfig":"31"},{"size":1575,"mtime":1612263614015,"results":"45","hashOfConfig":"31"},{"size":182,"mtime":1612176395111,"results":"46","hashOfConfig":"31"},{"size":6535,"mtime":1612176395109,"results":"47","hashOfConfig":"31"},{"size":4412,"mtime":1612176395107,"results":"48","hashOfConfig":"31"},{"size":178,"mtime":1612176395111,"results":"49","hashOfConfig":"31"},{"size":5651,"mtime":1612176395108,"results":"50","hashOfConfig":"31"},{"size":4140,"mtime":1612176395108,"results":"51","hashOfConfig":"31"},{"size":512,"mtime":1612176395110,"results":"52","hashOfConfig":"31"},{"size":5128,"mtime":1612176395111,"results":"53","hashOfConfig":"31"},{"size":1922,"mtime":1612212827362,"results":"54","hashOfConfig":"31"},{"size":2672,"mtime":1612212817325,"results":"55","hashOfConfig":"31"},{"size":9814,"mtime":1612176395110,"results":"56","hashOfConfig":"31"},{"size":2177,"mtime":1612217455317,"results":"57","hashOfConfig":"31"},{"size":2184,"mtime":1612216823456,"results":"58","hashOfConfig":"31"},{"size":1143,"mtime":1612263214343,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1d3pzum",{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/index.js",[],["122","123"],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/App.js",["124"],"import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { initializeApp } from './redux/reducers/AppReducer';\nimport { getTheme } from './themes/index';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { LinearProgress } from '@material-ui/core';\nimport Header from './components/Header/Header';\nimport Login from './components/Login/Login';\nimport Join from './components/Join/Join';\nimport NewsFeed from './components/NewsFeed/NewsFeed';\nimport Error from './components/Error/Error';\nimport Chat from './components/Dialogs/Chat/Chat';\nimport Footer from './components/Footer/Footer';\n\nconst App = ({ token, theme, initialized, initializeApp }) => {\n    const currentTheme = getTheme(theme);\n\n    useEffect(() => {\n        initializeApp(token);\n    }, []);\n\n    return (\n        <ThemeProvider theme={createMuiTheme(currentTheme)}>\n            <>\n                <CssBaseline />\n                {initialized ? (\n                    <>\n                        <Header />\n\n                        <Switch>\n                            <Redirect exact from=\"/\" to=\"/feed\" />\n                            <Route path=\"/login\" exact component={Login} />\n                            <Route path=\"/join\" exact component={Join} />\n                            <Route path=\"/feed\" exact component={NewsFeed} />\n                            <Route path=\"/messenger\" exact component={Chat} />\n                            <Route component={Error} />\n                        </Switch>\n\n                        <Footer />\n                    </>\n                ) : (\n                    <LinearProgress />\n                )}\n            </>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized,\n    token: state.auth.token,\n    theme: state.app.theme,\n});\n\nexport default connect(mapStateToProps, { initializeApp })(App);\n","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/store.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/reducers/ChatReducer.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/reducers/AuthReducer.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/reducers/AppReducer.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/helpers/localStorage.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Error/Error.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Join/Join.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Header/Header.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Login/Login.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Dialogs/Chat/Chat.js",["125"],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/api/api.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/hoc/withAuthRedirect.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Dialogs/Chat/Navbar/Navbar.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/themes/index.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/NewsFeed/NewsFeed.js",["126","127","128"],"import React, { useState, useEffect } from 'react';\nimport { compose } from 'redux';\nimport { withLogoutRedirect } from '../../hoc/withAuthRedirect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from './NewsFeed.module.css';\nimport { Container, Avatar } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport Post from '../Post/Post';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { uploadImage } from './helper.js';\nimport { getPosts, setPost } from '../../redux/reducers/NewsReducer';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport russian from '../../languages/russian';\nimport english from '../../languages/english';\nimport { Formik, Field } from 'formik';\nimport userAvatar from './assets/images/user.svg';\nimport { TextField } from 'formik-material-ui';\nimport * as Yup from 'yup';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: '100%',\n        paddingTop: 70,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}));\n\nfunction Newsfeed({ children, language, user, token, getPosts, setPost }) {\n    useEffect(() => {\n        getPosts(token);\n    }, []);\n\n    const translate = language === 'english' ? english : russian;\n    const classes = useStyles();\n    const [postState, setPostState] = useState(translate['newsfeed.post']);\n    const [state, setState] = useState({ file: '', imagePreviewUrl: '' });\n    const initialValues = { text: '' };\n    const PostSchema = Yup.object().shape({\n        text: Yup.string().required(translate['newsfeed.required']),\n    });\n\n    let { imagePreviewUrl } = state;\n    let imagePreviewDiv = null;\n\n    if (imagePreviewUrl) {\n        imagePreviewDiv = (\n            <div>\n                <img src={imagePreviewUrl} alt={'Image Preview'} />\n                <button className={styles.closeButton} onClick={(e) => handleClose(e)}>\n                    <CloseIcon />\n                </button>\n            </div>\n        );\n    } else {\n        imagePreviewDiv = <div></div>;\n    }\n\n    const handleImageChange = (e) => {\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        reader.onloadend = () => {\n            setState({\n                file: file,\n                imagePreviewUrl: reader.result,\n            });\n        };\n\n        reader.readAsDataURL(file);\n    };\n\n    const handleClose = (e) => {\n        setState({\n            file: '',\n            imagePreviewUrl: '',\n        });\n        imagePreviewDiv = <div></div>;\n    };\n\n    const handleSubmit = (values, { setSubmitting }) => {\n        setPostState(<CircularProgress style={{ height: '40px', width: '35px' }} />);\n        uploadImage(state.file).then(async (res) => {\n            await setPost({\n                query: {\n                    login: user.login,\n                    text: values.text,\n                    photo: res,\n                    user: { login: user.login, avatar: user.avatar },\n                },\n                token: token,\n                setSubmitting,\n            });\n            values.text = '';\n            setPostState(translate['newsfeed.post']);\n            setState({ file: '', imagePreviewUrl: '' });\n        });\n    };\n\n    useEffect(() => {\n        setPostState(translate['newsfeed.post']);\n    }, [language, setPostState]);\n\n    return (\n        <Container className={classes.root}>\n            <div className={styles.newPost}>\n                <Formik\n                    initialValues={initialValues}\n                    onSubmit={handleSubmit}\n                    validationSchema={PostSchema}\n                >\n                    {({ submitForm, isSubmitting }) => (\n                        <form className={styles.form}>\n                            <div className={styles.inputContainer}>\n                                <Avatar aria-label=\"recipe\" className={styles.avatar}>\n                                    {user?.avatar ? (\n                                        <img src={user.avatar} alt=\"Avatar\" />\n                                    ) : (\n                                        <img src={userAvatar} alt=\"Avatar\" />\n                                    )}\n                                </Avatar>\n                                <Field\n                                    placeholder={translate['newsfeed.placeholder']}\n                                    className={styles.input}\n                                    multiline={true}\n                                    name=\"text\"\n                                    component={TextField}\n                                />\n                                <div className={styles.inputWrapper}>\n                                    <input\n                                        name=\"file\"\n                                        type=\"file\"\n                                        id=\"inputFile\"\n                                        onChange={(e) => handleImageChange(e)}\n                                        accept=\"image/x-png,image/gif,image/jpeg\"\n                                        className={styles.inputFile}\n                                        multiple\n                                    />\n                                    <label htmlFor=\"inputFile\" className={styles.inputFileButton}>\n                                        <GetAppIcon className={styles.inputFileButtonImg} />\n                                    </label>\n                                </div>\n                            </div>\n                            <div className={styles.imgPreview}>{imagePreviewDiv}</div>\n                            <button\n                                disabled={isSubmitting}\n                                className={styles.submitButton}\n                                type=\"submit\"\n                                onClick={submitForm}\n                            >\n                                {postState}\n                            </button>\n                        </form>\n                    )}\n                </Formik>\n            </div>\n\n            {children}\n        </Container>\n    );\n}\n\nconst mapStateToProps = function (state) {\n    return {\n        children: state.news.posts.map((el) => <Post post={el} />),\n        language: state.app.language,\n        user: state.auth.user,\n        token: state.auth.token,\n    };\n};\n\nexport default compose(\n    connect(mapStateToProps, { getPosts, setPost }),\n    withLogoutRedirect,\n)(Newsfeed);\n","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Footer/Footer.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/languages/index.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Header/parts/MobileMenu.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Header/parts/DesktopMenu.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/NewsFeed/helper.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/redux/reducers/NewsReducer.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/languages/english.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/languages/russian.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Post/Post.js",["129"],"import { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport styles from './Post.module.css';\nimport { Formik, Field } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport {\n    Card,\n    CardHeader,\n    CardMedia,\n    CardContent,\n    CardActions,\n    Avatar,\n    IconButton,\n    Typography,\n    Collapse,\n    Paper,\n} from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteIconBorder from '@material-ui/icons/FavoriteBorder';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport userAvatar from './assets/images/user.svg';\nimport SendIcon from '@material-ui/icons/Send';\nimport { setComment, getComments, setLike } from '../../redux/reducers/NewsReducer';\nimport * as Yup from 'yup';\nimport russian from '../../languages/russian';\nimport english from '../../languages/english';\n\nconst CommentSchema = Yup.object().shape({\n    text: Yup.string().min(1, 'Too Short!'),\n});\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: 650,\n        margin: 'auto',\n        marginTop: 10,\n        marginBottom: 10,\n        padding: '0px 20px 20px',\n        [theme.breakpoints.down('700')]: {\n            width: 350,\n        },\n        backgroundColor: `${theme.palette.post.default} !important`,\n    },\n    content: {\n        borderBottom: `4px solid`,\n        borderColor: `${theme.palette.background.default} !important`,\n    },\n    header: {\n        fontSize: 17,\n        fontWeight: 450,\n    },\n    contentHeader: {\n        padding: `10px 0px`,\n    },\n    media: {\n        height: 0,\n        backgroundSize: '100% 100%',\n        paddingTop: '56.25%',\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    icon: {\n        font: 50,\n    },\n    commentSection: {\n        padding: '15px 0',\n    },\n    paper: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 700,\n        boxShadow: 'none',\n        backgroundColor: `${theme.palette.background.default} !important`,\n    },\n    avatar: {\n        backgroundColor: `#5181b8!important`,\n    },\n    input: {\n        border: '2px solid',\n        borderRadius: '5px',\n        borderColor: `${theme.palette.primary.main} !important`,\n        marginLeft: theme.spacing(1),\n        flex: 1,\n        padding: '5px 15px ',\n    },\n    iconButton: {\n        padding: 10,\n    },\n    liked: {\n        font: 50,\n        color: '#FF0000',\n    },\n    text: {\n        color: `${theme.palette.newsfeed.contrastText} !important`,\n        fontSize: '1rem',\n    },\n    icon: {\n        color: `${theme.palette.newsfeed.contrastText} !important`,\n        fontSize: '1.5rem',\n    },\n}));\n\nconst Post = (props) => {\n    const { posts, post, user, token, language, setComment, getComments, setLike } = props;\n\n    const classes = useStyles();\n\n    const translate = language === 'english' ? english : russian;\n    const initialValues = { text: '' };\n    const [expanded, setExpanded] = useState(false);\n    const [liked, setLiked] = useState(() => {\n        if (!post.likes.length) {\n            return false;\n        }\n        if (\n            post.likes.find((el) => {\n                return el.postId === post.id && el.userId === user.id;\n            })\n        ) {\n            return true;\n        }\n        return false;\n    });\n    const [postState, setPostState] = useState(<SendIcon />);\n\n    const handleExpandClick = () => {\n        getComments({ posts, postId: post.id, token });\n        setExpanded(!expanded);\n    };\n\n    const handleLikeClick = async () => {\n        await setLike({ posts, postId: post.id, userId: user.id, token });\n        setLiked(() => {\n            if (\n                post.likes.find((el) => {\n                    return el.postId === post.id && el.userId === user.id;\n                })\n            ) {\n                return true;\n            }\n            return false;\n        });\n    };\n\n    const handleSubmit = async (values, { setSubmitting }) => {\n        setPostState(<CircularProgress style={{ height: '40px', width: '35px' }} />);\n        await setComment({\n            posts,\n            post,\n            token,\n            query: {\n                postId: post.id,\n                text: values.text,\n                user: { login: user.login, avatar: user.avatar },\n            },\n            setSubmitting,\n        });\n        values.text = '';\n        setPostState(<SendIcon />);\n    };\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                classes={{\n                    title: classes.header,\n                }}\n                avatar={\n                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                        {post.user?.avatar ? (\n                            <img src={post.user.avatar} alt=\"Avatar\" />\n                        ) : (\n                            <img src={userAvatar} alt=\"Avatar\" />\n                        )}\n                    </Avatar>\n                }\n                title={post.user.login}\n            />\n\n            {post.photo ? (\n                <CardMedia\n                    className={classes.media}\n                    image={post.photo}\n                    title=\"Post image\"\n                    src={post.photo}\n                />\n            ) : null}\n\n            {post.text ? (\n                <CardContent className={classes.content}>\n                    <Typography className={classes.text}>{post.text}</Typography>\n                </CardContent>\n            ) : null}\n\n            <CardActions disableSpacing className={classes.content}>\n                <IconButton\n                    className={liked ? classes.liked : classes.icon}\n                    aria-label=\"like\"\n                    onClick={handleLikeClick}\n                >\n                    {liked ? <FavoriteIcon /> : <FavoriteIconBorder />}\n\n                    <Typography className={classes.icon}>{post.likes.length} </Typography>\n                </IconButton>\n\n                <IconButton aria-label=\"comment\" onClick={handleExpandClick}>\n                    <CommentIcon />\n                    <Typography className={classes.icon}>{post.commentsCount}</Typography>\n                </IconButton>\n            </CardActions>\n\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit className={classes.commentSection}>\n                {post.comments?.map((comment) => {\n                    return (\n                        <CardContent className={classes.content}>\n                            <CardHeader\n                                classes={{\n                                    title: classes.header,\n                                }}\n                                className={classes.contentHeader}\n                                avatar={\n                                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                                        {post.user.avatar ? (\n                                            <img src={comment.user.avatar} alt=\"Avatar\" />\n                                        ) : (\n                                            <img src={userAvatar} alt=\"Avatar\" />\n                                        )}\n                                    </Avatar>\n                                }\n                                title={comment.user.login ? comment.user.login : 'undefined'}\n                                subheader={<Typography>{comment.text}</Typography>}\n                            />\n                        </CardContent>\n                    );\n                })}\n\n                <Formik\n                    initialValues={initialValues}\n                    onSubmit={handleSubmit}\n                    validationSchema={CommentSchema}\n                >\n                    {({ submitForm, isSubmitting }) => (\n                        <form>\n                            <div className={styles.inputContainer}>\n                                <Paper component=\"form\" className={classes.paper}>\n                                    <Field\n                                        className={classes.input}\n                                        multiline={true}\n                                        component={TextField}\n                                        name=\"text\"\n                                        fullWidth={true}\n                                        placeholder={translate['post.placeholder']}\n                                    />\n                                    <IconButton\n                                        type=\"submit\"\n                                        className={classes.iconButton}\n                                        aria-label=\"search\"\n                                        onClick={submitForm}\n                                        disabled={isSubmitting}\n                                    >\n                                        {postState}\n                                    </IconButton>\n                                </Paper>\n                            </div>\n                        </form>\n                    )}\n                </Formik>\n            </Collapse>\n        </Card>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    user: state.auth.user,\n    token: state.auth.token,\n    posts: state.news.posts,\n    language: state.app.language,\n});\n\nexport default compose(\n    connect(mapStateToProps, { setComment, getComments, setLike }),\n    //withLoginRedirect\n)(Post);\n","/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/themes/DarkTheme.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/themes/LightTheme.js",[],"/Users/maksimrynkov/Desktop/rs-clone/rsclone/client/src/components/Dialogs/Search/Search.js",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":24,"column":8,"nodeType":"136","endLine":24,"endColumn":10,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":64,"column":8,"nodeType":"136","endLine":64,"endColumn":10,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":34,"column":8,"nodeType":"136","endLine":34,"endColumn":10,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":51,"column":17,"nodeType":"144","endLine":51,"endColumn":68},{"ruleId":"134","severity":1,"message":"145","line":104,"column":8,"nodeType":"136","endLine":104,"endColumn":32,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":109,"column":5,"nodeType":"149","messageId":"150","endLine":109,"endColumn":9},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initializeApp' and 'token'. Either include them or remove the dependency array. If 'initializeApp' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["153"],"React Hook useEffect has missing dependencies: 'getDialogs' and 'token'. Either include them or remove the dependency array.",["154"],"React Hook useEffect has missing dependencies: 'getPosts' and 'token'. Either include them or remove the dependency array. If 'getPosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["155"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'translate'. Either include it or remove the dependency array.",["156"],"no-dupe-keys","Duplicate key 'icon'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [initializeApp, token]",{"range":"165","text":"166"},"Update the dependencies array to be: [getDialogs, token]",{"range":"167","text":"168"},"Update the dependencies array to be: [getPosts, token]",{"range":"169","text":"170"},"Update the dependencies array to be: [language, setPostState, translate]",{"range":"171","text":"172"},[971,973],"[initializeApp, token]",[2281,2283],"[getDialogs, token]",[1256,1258],"[getPosts, token]",[3378,3402],"[language, setPostState, translate]"]